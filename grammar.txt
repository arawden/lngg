// http://craftinginterpreters.com/appendix-i.html

// Full program
program → declaration* EOF


// Declarations: statements that declare names
declaration → classDecl
            | funDecl
            | varDecl
            | statement

classDecl → "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}"

funDecl  → "fun" function

varDecl → "var" IDENTIFIER ( "=" expression )? ";"


// Declarations → Statements
statement → exprStmt
          | ifStmt
          | whileStmt
          | forStmt
          | returnStmt
          | printStmt
          | block

exprStmt → expression ";"

ifStmt → "if" "(" expression ")" statement ( "else" statement )?

whileStmt → "while" "(" expression ")" statement

forStmt → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement

returnStmt → "return" expression? ";"

printStmt → "print" expression ";"

block → "{" declaration* "}"


// Statements → Expressions
// Note the precedence relationships
expression → assignment

assignment → ( call "." )? IDENTIFIER "=" assignment
           | logic_or

logic_or → logic_and ( "or" logic_and )*

logic_and → equality ( "and" equality )*

equality → comparison ( ( "!=" | "==" ) comparison )*

comparison → addition ( ( ">" | ">=" | "<" | "<=" ) addition )*

addition → multiplication ( ( "-" | "+" ) multiplication )*

multiplication → unary ( ( "/" | "*" ) unary )*

unary → ( "-" | "!" ) unary | call

call → primary ( "(" arguments? ")" | "." IDENTIFIER )*

primary → "true" | "false" | "nil" | "this"
        | NUMBER | STRING
        | "(" expression ")"
        | IDENTIFIER
        | "super" "." IDENTIFIER


// Utility
function → IDENTIFIER "(" parameters? ")" block
parameters → IDENTIFIER ( "," IDENTIFIER )*
arguments → expression ( "," expression )*


// Lexical
NUMER → DIGIT+ ( "." DIGIT+ )?
STRING → '"' [^"] '"'
IDENTIFIER → ALPHA (ALPHA | DIGIT)*
ALPHA → [a-zA-Z_]
DIGIT → [0-9]
